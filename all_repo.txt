Repository File Hierarchy:
interface.js
README.md
.env.template
.gitignore
docker-compose.yml
frontend/index.html
frontend/Dockerfile
frontend/.eslintrc.cjs
frontend/vite.config.js
frontend/.gitignore
frontend/package.json
frontend/public/vite.svg
frontend/src/App.css
frontend/src/index.css
frontend/src/main.jsx
frontend/src/App.jsx
frontend/src/assets/react.svg
backend/requirements.txt
backend/Dockerfile
backend/app.py
packager/packager.js
packager/package.json

========================================

Title: interface.js
Path: ./interface.js
========================================
const { execSync } = require('child_process');
const path = require('path');
const fs = require('fs');

// Function to load a module from the global node_modules using dynamic import
const loadGlobalModule = async (moduleName) => {
  try {
    // Get the global node_modules path using npm root -g
    const globalNodeModulesPath = execSync('npm root -g').toString().trim();
    console.log(`Global node_modules path: ${globalNodeModulesPath}`);

    // Construct the path to the module's main directory
    let modulePath = path.join(globalNodeModulesPath, moduleName);
    console.log(`${moduleName} path: ${modulePath}`);

    // Check if the modulePath is a directory and point to index.js if it is
    if (fs.existsSync(modulePath) && fs.lstatSync(modulePath).isDirectory()) {
      modulePath = path.join(modulePath, 'index.js');
      console.log(`Resolved ${moduleName} to: ${modulePath}`);
    }

    // Use dynamic import to load the ES module
    const module = await import(modulePath);
    return module;
  } catch (error) {
    console.error(`Failed to load ${moduleName} from global node_modules: ${error.message}`);
    process.exit(1);
  }
};

// Load dotenv from the global installation using require
const loadGlobalDotenv = () => {
  try {
    // Get the global node_modules path using npm root -g
    const globalNodeModulesPath = execSync('npm root -g').toString().trim();
    console.log(`Global node_modules path: ${globalNodeModulesPath}`);

    // Construct the path to dotenv's main file
    const dotenvPath = path.join(globalNodeModulesPath, 'dotenv');
    console.log(`Dotenv path: ${dotenvPath}`);

    // Require dotenv dynamically from the global path
    return require(dotenvPath);
  } catch (error) {
    console.error(`Failed to load dotenv from global node_modules: ${error.message}`);
    process.exit(1);
  }
};

// Load dotenv using require
const dotenv = loadGlobalDotenv();

try {
    // Determine the directory of the executable or script
  const executableDir = path.dirname(process.execPath);

    // Print current working directory and list files for debugging
    console.log(`Current working directory: ${executableDir}`);
    console.log('Files in the current directory:', fs.readdirSync(executableDir));

    console.log('Loading environment variables from .env file');
    dotenv.config({ path: path.join(executableDir, '.env') });
} catch (error) {
    console.error(error.message);
    process.exit(1);
}


// Function to open the default browser to the specified URL
const openDefaultBrowser = async () => {
  const url = `http://${process.env.FRONTEND_HOST || 'localhost'}:${process.env.FRONTEND_PORT || 3000}`;
  console.log(`Opening default browser to ${url}`);

  try {
    // Load the 'open' module dynamically as it is an ES module
    const openModule = await loadGlobalModule('open');
    const open = openModule.default || openModule; // ES modules export `default`

    // Use the open function to open the URL in the default browser
    await open(url);
    console.log('Default browser opened successfully.');
  } catch (error) {
    console.error(`Failed to open default browser: ${error.message}`);
    process.exit(1);
  }
};

// Execute the function to open the URL in the default browser
(async () => {
  await openDefaultBrowser();
})();


Title: README.md
Path: ./README.md
========================================
# MindToken

## Package app

```bash
cd packager
npm install 
npm run package
```

Title: .env.template
Path: ./.env.template
========================================
FRONTEND_PORT=3000
BACKEND_PORT=5000


Title: .gitignore
Path: ./.gitignore
========================================
.venv
.idea
*.iml
*.ipr

.env

frontend/node_modules

Title: docker-compose.yml
Path: ./docker-compose.yml
========================================
version: '3.8'

services:
  backend:
    build:
      context: ./backend  # ! Important: Defines the context for the dockerfile pwd
      dockerfile: ./Dockerfile
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"  # Use environment variable
    volumes:
      - ./backend:/app
    environment:
        - BACKEND_PORT=${BACKEND_PORT}  # Pass the backend

  frontend:
    build:
      context: ./frontend
      dockerfile: ./Dockerfile
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"  # Use environment variable
    volumes:
      - ./frontend:/app # Allows hot-reloading
    environment:
      - BACKEND_PORT=${BACKEND_PORT}  # Pass the backend port to the frontend service
      - BACKEND_HOST=backend  # Use the service name
      - FRONTEND_PORT=${FRONTEND_PORT}  # Pass the frontend port to the frontend service


Title: index.html
Path: ./frontend/index.html
========================================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>


Title: Dockerfile
Path: ./frontend/Dockerfile
========================================
# Use a Debian-based Node.js image for broader compatibility
FROM node:16-alpine

# Set the working directory
WORKDIR /app

# Copy package.json and package-lock.json
COPY package*.json ./

# Install dependencies
RUN npm install

# Copy the rest of the application code
COPY . .


# Expose the port defined in the environment variable
EXPOSE ${FRONTEND_PORT}

# Start the application
CMD ["npm", "run", "dev"]


Title: .eslintrc.cjs
Path: ./frontend/.eslintrc.cjs
========================================
module.exports = {
  root: true,
  env: { browser: true, es2020: true },
  extends: [
    'eslint:recommended',
    'plugin:react/recommended',
    'plugin:react/jsx-runtime',
    'plugin:react-hooks/recommended',
  ],
  ignorePatterns: ['dist', '.eslintrc.cjs'],
  parserOptions: { ecmaVersion: 'latest', sourceType: 'module' },
  settings: { react: { version: '18.2' } },
  plugins: ['react-refresh'],
  rules: {
    'react/jsx-no-target-blank': 'off',
    'react-refresh/only-export-components': [
      'warn',
      { allowConstantExport: true },
    ],
  },
}


Title: vite.config.js
Path: ./frontend/vite.config.js
========================================
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import dotenv from 'dotenv';

dotenv.config({ path: '../.env' });

console.log('Frontend port:', process.env.FRONTEND_PORT);
console.log('Backend host:', process.env.BACKEND_HOST);
console.log('Backend port:', process.env.BACKEND_PORT);
console.log('API URL:', `http://${process.env.BACKEND_HOST || 'localhost'}:${process.env.BACKEND_PORT || 8000}`);

export default defineConfig({
  plugins: [react()],
  server: {
    port: parseInt(process.env.FRONTEND_PORT, 10) || 3000,
    host: true,
    proxy: {
      '/api': {
        target: `http://${process.env.BACKEND_HOST || 'localhost'}:${process.env.BACKEND_PORT || 8000}`,
        changeOrigin: true,
        rewrite: (path) => path.replace(/^\/api/, '')
      }
    }
  },
  build: {
    outDir: 'dist',
  },
});

Title: .gitignore
Path: ./frontend/.gitignore
========================================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?


Title: package.json
Path: ./frontend/package.json
========================================
{
  "name": "vite-quart-cross-platform-frontend",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint frontend --ext js,jsx --report-unused-disable-directives --max-warnings 0",
    "preview": "vite preview"
  },
  "dependencies": {
    "axios": "^0.24.0",
    "dotenv": "^16.0.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0"
  },
  "devDependencies": {
    "@types/react": "^18.2.66",
    "@types/react-dom": "^18.2.22",
    "@vitejs/plugin-react": "^4.3.1",
    "eslint": "^8.57.0",
    "eslint-plugin-react": "^7.34.1",
    "eslint-plugin-react-hooks": "^4.6.0",
    "eslint-plugin-react-refresh": "^0.4.6",
    "vite": "^5.2.0"
  }
}


Title: vite.svg
Path: ./frontend/public/vite.svg
========================================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>

Title: App.css
Path: ./frontend/src/App.css
========================================
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}


Title: index.css
Path: ./frontend/src/index.css
========================================
:root {
  font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  display: flex;
  place-items: center;
  min-width: 320px;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
}


Title: main.jsx
Path: ./frontend/src/main.jsx
========================================
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.jsx'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)


Title: App.jsx
Path: ./frontend/src/App.jsx
========================================
import {useState} from 'react';
import axios from 'axios';
import reactLogo from './assets/react.svg';
import viteLogo from '/vite.svg';
import './App.css';

function App() {
    const [count, setCount] = useState(0);
    const [message, setMessage] = useState('');

    const fetchMessage = async () => {
        try {
            const response = await axios.get('/api/data'); // Call the API
            setMessage(response.data.message); // Set the message from the API response
        } catch (error) {
            console.error('Error fetching message:', error);
            setMessage('Failed to fetch message'); // Handle errors
        }
    };

    return (
        <>
            <div>
                <a href="https://vitejs.dev" target="_blank" rel="noopener noreferrer">
                    <img src={viteLogo} className="logo" alt="Vite logo"/>
                </a>
                <a href="https://react.dev" target="_blank" rel="noopener noreferrer">
                    <img src={reactLogo} className="logo react" alt="React logo"/>
                </a>
            </div>
            <h1>Vite + React + Quart</h1>
            <div className="card">
                <button onClick={() => setCount((count) => count + 1)}>
                    count is {count}
                </button>
                <button onClick={fetchMessage}>
                    Fetch Message
                </button>
                <p>
                    {message}
                </p>
                <p>
                    Edit <code>src/App.jsx</code> and save to test HMR
                </p>
            </div>
            <p className="read-the-docs">
                Click on the Vite and React logos to learn more
            </p>
        </>
    );
}

export default App;

Title: react.svg
Path: ./frontend/src/assets/react.svg
========================================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

Title: requirements.txt
Path: ./backend/requirements.txt
========================================
aiofiles==23.2.1
blinker==1.8.2
click==8.1.7
exceptiongroup==1.2.1
Flask==3.0.3
h11==0.14.0
h2==4.1.0
hpack==4.0.0
Hypercorn==0.17.3
hyperframe==6.0.1
importlib_metadata==7.1.0
itsdangerous==2.2.0
Jinja2==3.1.4
MarkupSafe==2.1.5
priority==2.0.0
Quart==0.19.6
quart-cors==0.7.0
taskgroup==0.0.0a4
tomli==2.0.1
typing_extensions==4.12.2
Werkzeug==3.0.3
wsproto==1.2.0
zipp==3.19.2


Title: Dockerfile
Path: ./backend/Dockerfile
========================================
FROM python:3.9-slim

WORKDIR /app

# Install dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy the application code
COPY . .

# Expose the port from the environment variable
EXPOSE ${BACKEND_PORT}

# Run the Quart app with the port from the environment variable
CMD ["python", "app.py"]


Title: app.py
Path: ./backend/app.py
========================================
import os
from quart import Quart, jsonify
from quart_cors import cors

app = Quart(__name__)
app = cors(app)  # Allow all domains for simplicity, adjust as needed

@app.route("/data", methods=["GET"])
async def get_data():
    return jsonify({"message": "Hello from Quart!"})

if __name__ == "__main__":
    port = int(os.getenv("BACKEND_PORT", 5000))  # Use the BACKEND_PORT from the environment
    app.run(host="0.0.0.0", port=port)


Title: packager.js
Path: ./packager/packager.js
========================================
const {spawn} = require('child_process');
const path = require('path');
const fs = require('fs');

// Function to find a file by traversing up the directory tree
const findFileInTree = (startPath, fileName) => {
    let currentPath = startPath;

    console.log(`Starting search for ${fileName} from: ${startPath}`);

    while (true) {
        const potentialPath = path.join(currentPath, fileName);
        console.log(`Checking: ${potentialPath}`); // Debug: Print the current path being checked

        if (fs.existsSync(potentialPath)) {
            console.log(`Found ${fileName} at: ${potentialPath}`); // Debug: Found the file
            return potentialPath;
        }

        const parentPath = path.resolve(currentPath, '..');
        console.log(`Moving up to parent path: ${parentPath}`); // Debug: Print the next directory to check

        if (parentPath === currentPath) {
            // Reached the root directory without finding the file
            throw new Error(`${fileName} not found`);
        }
        currentPath = parentPath;
    }
};

// Function to find the directory containing docker-compose.yml by traversing up the directory tree
const findDockerComposeDirectory = (startPath) => {
    return path.dirname(findFileInTree(startPath, 'docker-compose.yml'));
};

let composeFileDirectory;

try {
    // Determine the directory of the executable or script
    const executableDir = path.dirname(process.execPath);
    // Try to locate docker-compose.yml starting from the executable directory
    composeFileDirectory = findDockerComposeDirectory(executableDir);
    console.log(`Using docker-compose.yml directory: ${composeFileDirectory}`); // Debug: Print the directory to be used

    // Print current working directory and list files for debugging
    console.log(`Current working directory: ${composeFileDirectory}`);
    console.log('Files in the current directory:', fs.readdirSync(composeFileDirectory));
} catch (error) {
    console.error(error.message);
    process.exit(1);
}


// Function to install Puppeteer globally if not already installed
const installOpenAndDotenvGlobally = () => {
    return new Promise((resolve, reject) => {
                // Install Puppeteer globally
                const npmInstall = spawn('npm', ['install', '-g', 'open' , 'dotenv'], {stdio: 'inherit'});

                npmInstall.on('close', (installCode) => {
                    if (installCode === 0) {
                        console.log('open and dotenv installed successfully.');
                        resolve();
                    } else {
                        reject(new Error('Failed to install open and dotenv globally.'));
                    }
                });
    });
};
const executeCommand = (command, args, workingDirectory) => {
    console.log(`Executing command: ${command} ${args.join(' ')}`); // Debug: Print the command being executed
    console.log(`In directory: ${workingDirectory}`); // Debug: Print the working directory for the command

    return new Promise((resolve, reject) => {
        const child = spawn(command, args, {cwd: workingDirectory});

        let dockerComposeOutput = '';

        child.stdout.on('data', (data) => {
            const output = data.toString();
            process.stdout.write(output); // Output stdout to the console
            dockerComposeOutput += output;

            // Look for specific markers in the Docker Compose output that indicate readiness
            if (output.includes('Attaching to') || output.includes('Running on')) {
                resolve(); // Resolve the promise when these markers are found
            }
        });

        child.stderr.on('data', (data) => {
            process.stderr.write(data); // Output stderr to the console
        });

        child.on('close', (code) => {
            if (code !== 0 && !dockerComposeOutput.includes('Attaching to') && !dockerComposeOutput.includes('Running on')) {
                reject(`Command failed with code ${code}`);
            }
        });
    });
};

const spawnInterfaceScript = () => {

    // Determine the path to interface.js relative to the current executable
    const interfaceScriptPath = findFileInTree(path.dirname(process.execPath), 'interface.js');

    console.log(`Spawning interface.js from: ${interfaceScriptPath}`); // Debug: Print the path to interface.js
    const child = spawn('node', [interfaceScriptPath], {
        stdio: 'inherit' // Inherit the stdio to see the output in the current terminal
    });

    child.on('close', (code) => {
        if (code !== 0) {
            console.error(`interface.js process exited with code ${code}`);
        } else {
            console.log('interface.js executed successfully.');
        }
    });
};

(async () => {
    try {
        await installOpenAndDotenvGlobally();

        console.log('Starting Docker Compose with rebuild...');
        await executeCommand('docker-compose', ['up', '--build'], composeFileDirectory);
        console.log('Docker Compose started successfully.');

        // Spawn the interface script with the specified URL
        spawnInterfaceScript();
    } catch (error) {
        console.error(`Execution failed: ${error}`); // Debug: Print execution failure details
    }
})();


Title: package.json
Path: ./packager/package.json
========================================
{
  "name": "vite-quart-cross-plarform",
  "version": "1.0.0",
  "description": "Your application description",
  "main": "packager.js",
  "scripts": {
    "package": "pkg . --out-path ../ --public-packages 'open,dotenv' "
  },
  "dependencies": {
    "pkg": "^5.8.1"
  },
  "bin": {
    "mind-token": "packager.js"
  },
  "pkg": {
    "targets": [
      "node18-linux-x64",
      "node18-macos-x64",
      "node18-win-x64"
    ],
    "compression": "GZip"
  }
}


